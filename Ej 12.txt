Sabemos que:
A lo sumo sqrt(n) estan fuera del rango [20,40]
Los enteros de [20,40] son un conjunto finito acotado.
Las muestras son enteros positivos. (Por cómodidad considero el 0 como positivo, no me afecta la complejidad)

Como son enteros positivos, tenemos que:
[0,19] y [20,40] -> Acotado -> Puedo usar counting sort
[41, +inf) -> No acotado -> Sé que hay menos de sqrt(n) elementos, "Se banca" algo cuadratico.

Idea: Puedo ordenar con countingSort de [0,40] y luego ordenar a [41, +inf) con un algoritmo de ordenamiento cuadratico como insert sort.
Luego unir los resultados. Notar que para todo n en [0,40] y para todo m en [41, +inf) se cumple que n<=m

La complejidad será medida en terminos de n: longitud de A y h: #elementos distintos en el intervalo [41, +inf), se sabe que son <= sqrt(n)

ordenarDatos(inout A: array<int>)
# Requiere que todos los elementos de A sean mayores o iguales a 0.
// Complejidad: O(n) + O(h) + O(n) + O(n) = O(n) + O(h), como h en el peor caso es sqrt(n), se tiene que O(n + sqrt(n)) = O(n)
# La complejidad final es O(n) como se quería :)

dMayores: DiccionarioLog<int,int>  // O(1)  // Claves: elem, valores: #repeticiones

arrAparicionesMenores = new array<int>(41)  // O(1)
// Asumo que se inicializan en 0

for(i=0; i<A.length; i++){  // **NOTA
    if (A[i] <= 40) then  // Evaluar la guarda O(1)
        arrAparticionesMenores[i] += 1  // O(1)
    else if (dMayor.esta?(A[i]) then  // Evaluar la guarda O(log(h))
        dMayores.definir(A[i], dMayores.obtener(A[i]) + 1)  //O(log(h))
    else
        dMayores.definirRápido(A[i], 1)  //O(log(h))
}

arrMayores = new array<tuple<int,int>>(dMayores.length)  // O(h)  // Array de tuplas, el primer valor es el elem y el segundo #repeticiones

i=0  // O(1)

for(key in dMayores){  // Se ejecuta h veces. Complejidad del ciclo O(h*log(h)) = O(n) por (*)
    arrMayores[i] = tuple<key, dMayores.obtener(key)>  \\ O(log(h))
    i++  // O(1)
}

arrMayores.insertSort() <- Criterio: ordena crecientemente según el primer valor de la tupla (ordena por elem)  // O(h^2) = O((sqrt(n))^2) = O(n)

k=0  // O(1)

// En total, sumando las operaciones, entre los dos ciclos, se forma complejidad O(n)
for(i=0; i<arrAparicionesMenores.length; i++){  // Complejidad del ciclo O(#elementos menores o iguales a 40)
    for(j=0; j<arrAparicionesMenores[i]; j++){
        A[k] = i  // O(1)
        k++  // O(1)
    }
}

for(i=0; i<arrMayores.length; i++){  // Complejidad del ciclo O(#elementos mayores a 40)
    for(j=0; j<arrMayores[i]; j++){
        A[k]=i  // O(1)
        k++  // O(1)
    }
}

// **Nota: Ese ciclo se ejecuta n veces. En el peor caso se tiene que h = sqrt(n). Por lo tanto n-sqrt(n) elementos se realizan en O(1) y sqrt(n) elementos se realizan en O(log(sqrt(n)), entonces se tiene que O(n - sqrt(n)) + O(sqrt(n)*log(sqrt(n))) = O(n) + O(n) por (*), luego queda que el ciclo es O(n).

(*) Hice el límite en symbolab: f(n): sqrt(n)*log(sqrt(n)) pertenece a O(n).